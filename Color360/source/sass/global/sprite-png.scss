// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$google-maps-logo-name: 'google-maps-logo';
$google-maps-logo-x: 235px;
$google-maps-logo-y: 101px;
$google-maps-logo-offset-x: -235px;
$google-maps-logo-offset-y: -101px;
$google-maps-logo-width: 110px;
$google-maps-logo-height: 33px;
$google-maps-logo-total-width: 431px;
$google-maps-logo-total-height: 364px;
$google-maps-logo-image: '../img/sprite.png';
$google-maps-logo: (235px, 101px, -235px, -101px, 110px, 33px, 431px, 364px, '../img/sprite.png', 'google-maps-logo', );
$google-name: 'google';
$google-x: 0px;
$google-y: 327px;
$google-offset-x: 0px;
$google-offset-y: -327px;
$google-width: 207px;
$google-height: 37px;
$google-total-width: 431px;
$google-total-height: 364px;
$google-image: '../img/sprite.png';
$google: (0px, 327px, 0px, -327px, 207px, 37px, 431px, 364px, '../img/sprite.png', 'google', );
$logo-trusted-name: 'logo-trusted';
$logo-trusted-x: 0px;
$logo-trusted-y: 0px;
$logo-trusted-offset-x: 0px;
$logo-trusted-offset-y: 0px;
$logo-trusted-width: 235px;
$logo-trusted-height: 327px;
$logo-trusted-total-width: 431px;
$logo-trusted-total-height: 364px;
$logo-trusted-image: '../img/sprite.png';
$logo-trusted: (0px, 0px, 0px, 0px, 235px, 327px, 431px, 364px, '../img/sprite.png', 'logo-trusted', );
$yandexmapslogo-name: 'yandexmapslogo';
$yandexmapslogo-x: 235px;
$yandexmapslogo-y: 0px;
$yandexmapslogo-offset-x: -235px;
$yandexmapslogo-offset-y: 0px;
$yandexmapslogo-width: 196px;
$yandexmapslogo-height: 101px;
$yandexmapslogo-total-width: 431px;
$yandexmapslogo-total-height: 364px;
$yandexmapslogo-image: '../img/sprite.png';
$yandexmapslogo: (235px, 0px, -235px, 0px, 196px, 101px, 431px, 364px, '../img/sprite.png', 'yandexmapslogo', );
$spritesheet-width: 431px;
$spritesheet-height: 364px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($google-maps-logo, $google, $logo-trusted, $yandexmapslogo, );
$spritesheet: (431px, 364px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
